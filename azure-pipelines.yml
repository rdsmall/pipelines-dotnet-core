trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - 'bicep/*'
      - 'azure-pipelines.yml'

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - 'bicep/*'

variables:
  # Replace with your actual service connection name
  azureServiceConnection: 'azure-service-connection-v2'  # Change this to match your service connection name
  subscriptionId: 'your-subscription-id'      # Your Azure subscription ID
  location: 'East US'
  
  # Build variables
  vmImageName: 'ubuntu-latest'
  bicepFile: 'bicep/main.bicep'
  devParametersFile: 'bicep/main.parameters.dev.json'
  stagingParametersFile: 'bicep/main.parameters.staging.json'
  prodParametersFile: 'bicep/main.parameters.prod.json'

stages:
# Always validate first
- stage: Validate
  displayName: 'Validate Bicep Template'
  jobs:
  - job: ValidateBicep
    displayName: 'Validate and What-If Analysis'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Install Bicep CLI'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep install
          echo "Bicep version: $(az bicep version)"

    - task: AzureCLI@2
      displayName: 'Lint and Build Bicep'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Linting Bicep template..."
          az bicep build --file $(bicepFile)
          echo "‚úÖ Bicep template is syntactically valid"

    - task: AzureCLI@2
      displayName: 'What-If Analysis (Dev)'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Analyzing changes for Development environment..."
          az deployment group what-if \
            --resource-group "rg-myapp-test-v2" \
            --template-file $(bicepFile) \
            --parameters @$(devParametersFile) \
            --result-format FullResourcePayloads

# Deploy to Development (automatic for develop branch)
- stage: DeployDev
  displayName: 'üöÄ Deploy to Development'
  dependsOn: Validate
  condition: |
    and(
      succeeded(),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/develop'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )
  variables:
    resourceGroupName: 'rg-myapp-test-v2'
    environmentName: 'dev'
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Development'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'Deploy to Development'
            inputs:
              azureServiceConnection: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az bicep install
                
                echo "üöÄ Deploying to Development environment..."
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file $(bicepFile) \
                  --parameters @$(devParametersFile) \
                  --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                  --verbose
                
                echo "‚úÖ Development deployment completed"

          - task: AzureCLI@2
            displayName: 'Verify Development Deployment'
            inputs:
              azureServiceConnection: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üîç Verifying deployment..."
                az deployment group show \
                  --resource-group $(resourceGroupName) \
                  --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                  --query properties.provisioningState
                
                echo "üìä Deployment outputs:"
                az deployment group show \
                  --resource-group $(resourceGroupName) \
                  --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                  --query properties.outputs

# Deploy to Staging (automatic promotion from dev, only for main branch)
- stage: DeployStaging
  displayName: 'üéØ Deploy to Staging'
  dependsOn: DeployDev
  condition: |
    and(
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/main')
    )
  variables:
    resourceGroupName: 'rg-myapp-staging'
    environmentName: 'staging'
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'What-If Analysis (Staging)'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az bicep install
                echo "üîç Analyzing changes for Staging environment..."
                az deployment group what-if \
                  --resource-group $(resourceGroupName) \
                  --template-file $(bicepFile) \
                  --parameters @$(stagingParametersFile) \
                  --result-format FullResourcePayloads

          - task: AzureCLI@2
            displayName: 'Deploy to Staging'
            inputs:
              azureServiceConnection: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üéØ Deploying to Staging environment..."
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file $(bicepFile) \
                  --parameters @$(stagingParametersFile) \
                  --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                  --verbose
                
                echo "‚úÖ Staging deployment completed"

# Deploy to Production (manual approval required)
- stage: DeployProd
  displayName: 'üè≠ Deploy to Production'
  dependsOn: DeployStaging
  condition: |
    and(
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/main')
    )
  variables:
    resourceGroupName: 'rg-myapp-prod'
    environmentName: 'prod'
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'Final What-If Analysis (Production)'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az bicep install
                echo "üîç Final analysis for Production environment..."
                az deployment group what-if \
                  --resource-group $(resourceGroupName) \
                  --template-file $(bicepFile) \
                  --parameters @$(prodParametersFile) \
                  --result-format FullResourcePayloads

          - task: AzureCLI@2
            displayName: 'Deploy to Production'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üè≠ Deploying to Production environment..."
                az deployment group create \
                  --resource-group $(resourceGroupName) \
                  --template-file $(bicepFile) \
                  --parameters @$(prodParametersFile) \
                  --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                  --verbose
                
                echo "üéâ Production deployment completed successfully!"

          - task: AzureCLI@2
            displayName: 'Post-Deployment Verification'
            inputs:
              azureServiceConnection: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üîç Verifying production deployment..."
                deploymentStatus=$(az deployment group show \
                  --resource-group $(resourceGroupName) \
                  --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                  --query properties.provisioningState -o tsv)
                
                if [ "$deploymentStatus" = "Succeeded" ]; then
                  echo "‚úÖ Production deployment verified successfully"
                  echo "üìä Deployment outputs:"
                  az deployment group show \
                    --resource-group $(resourceGroupName) \
                    --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
                    --query properties.outputs
                else
                  echo "‚ùå Production deployment verification failed"
                  exit 1
                fi