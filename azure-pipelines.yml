trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - 'bicep/*'
      - 'azure-pipelines.yml'

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - 'bicep/*'

variables:
  azureServiceConnection: 'azure-service-connection-v2'
  subscriptionId: 'db11dea1-6d39-4635-8129-55183eb04293'
  location: 'East US'
  vmImageName: 'ubuntu-latest'
  bicepFile: 'bicep/main.bicep'
  parametersFile: 'bicep/main.parameters.json'

stages:
# Validate stage
- stage: Validate
  displayName: 'Validate Bicep Template'
  jobs:
  - job: ValidateBicep
    displayName: 'Validate and What-If Analysis'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Install Bicep CLI'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep install
          echo "Bicep version: $(az bicep version)"

    - task: AzureCLI@2
      displayName: 'Lint and Build Bicep'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Linting Bicep template..."
          az bicep build --file $(bicepFile)
          echo "‚úÖ Bicep template is syntactically valid"

    - task: AzureCLI@2
      displayName: 'What-If Analysis'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Analyzing changes for Development environment..."
          az deployment group what-if \
            --resource-group "rg-myapp-test-v2" \
            --template-file $(bicepFile) \
            --parameters @$(parametersFile) environment=dev \
            --result-format FullResourcePayloads

# Deploy to Development
- stage: DeployDev
  displayName: 'üöÄ Deploy to Development'
  dependsOn: Validate
  condition: |
    and(
      succeeded(),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/develop'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )
  variables:
    resourceGroupName: 'rg-myapp-test-v2'
    environmentName: 'dev'
  jobs:
  - job: DeployToDev
    displayName: 'Deploy to Development'
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    
    # Convert Bicep to ARM first
    - task: AzureCLI@2
      displayName: 'Convert Bicep to ARM'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep install
          echo "Converting Bicep to ARM template..."
          az bicep build --file $(bicepFile) --outfile bicep/main.json
          echo "‚úÖ Bicep converted to ARM template"
    
    # Deploy using ARM template task (more reliable)
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Deploy ARM Template'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureServiceConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroupName)
        location: $(location)
        templateLocation: 'Linked artifact'
        csmFile: 'bicep/main.json'
        csmParametersFile: $(parametersFile)
        overrideParameters: '-environment $(environmentName)'
        deploymentMode: 'Incremental'
        deploymentName: 'bicep-$(environmentName)-$(Build.BuildNumber)'
    
    # Verify deployment
    - task: AzureCLI@2
      displayName: 'Verify Deployment'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Verifying deployment..."
          az deployment group show \
            --resource-group $(resourceGroupName) \
            --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
            --query properties.provisioningState
          
          echo "üìä Deployment outputs:"
          az deployment group show \
            --resource-group $(resourceGroupName) \
            --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
            --query properties.outputs

# Deploy to Staging
- stage: DeployStaging
  displayName: 'üéØ Deploy to Staging'
  dependsOn: DeployDev
  condition: |
    and(
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/main')
    )
  variables:
    resourceGroupName: 'rg-myapp-test-v2'
    environmentName: 'staging'
  jobs:
  - job: DeployToStaging
    displayName: 'Deploy to Staging'
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Convert Bicep to ARM'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep install
          az bicep build --file $(bicepFile) --outfile bicep/main.json
    
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Deploy to Staging'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureServiceConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroupName)
        location: $(location)
        templateLocation: 'Linked artifact'
        csmFile: 'bicep/main.json'
        csmParametersFile: $(parametersFile)
        overrideParameters: '-environment $(environmentName)'
        deploymentMode: 'Incremental'
        deploymentName: 'bicep-$(environmentName)-$(Build.BuildNumber)'

# Deploy to Production
- stage: DeployProd
  displayName: 'üè≠ Deploy to Production'
  dependsOn: DeployStaging
  condition: |
    and(
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/main')
    )
  variables:
    resourceGroupName: 'rg-myapp-test-v2'
    environmentName: 'prod'
  jobs:
  - job: DeployToProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Convert Bicep to ARM'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep install
          az bicep build --file $(bicepFile) --outfile bicep/main.json
    
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Deploy to Production'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureServiceConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroupName)
        location: $(location)
        templateLocation: 'Linked artifact'
        csmFile: 'bicep/main.json'
        csmParametersFile: $(parametersFile)
        overrideParameters: '-environment $(environmentName)'
        deploymentMode: 'Incremental'
        deploymentName: 'bicep-$(environmentName)-$(Build.BuildNumber)'
    
    - task: AzureCLI@2
      displayName: 'Post-Deployment Verification'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Verifying production deployment..."
          deploymentStatus=$(az deployment group show \
            --resource-group $(resourceGroupName) \
            --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
            --query properties.provisioningState -o tsv)
          
          if [ "$deploymentStatus" = "Succeeded" ]; then
            echo "‚úÖ Production deployment verified successfully"
            echo "üìä Deployment outputs:"
            az deployment group show \
              --resource-group $(resourceGroupName) \
              --name "bicep-$(environmentName)-$(Build.BuildNumber)" \
              --query properties.outputs
          else
            echo "‚ùå Production deployment verification failed"
            exit 1
          fi